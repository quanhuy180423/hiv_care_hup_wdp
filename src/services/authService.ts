import { apiClient } from "./apiClient";
import type { User, UserProfileRes } from "@/store/authStore";
import axios from "axios";

// Error handler utility
const handleApiError = (error: unknown): string => {
  if (axios.isAxiosError(error)) {
    if (error.response?.data?.message) {
      return error.response.data.message;
    }

    switch (error.response?.status) {
      case 400:
        return "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá";
      case 401:
        return "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n";
      case 403:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y";
      case 404:
        return "Kh√¥ng t√¨m th·∫•y t√†i nguy√™n";
      case 422:
        return "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
      case 429:
        return "Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau";
      case 500:
        return "L·ªói m√°y ch·ªß n·ªôi b·ªô";
      default:
        return error.message || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh";
    }
  }

  if (error instanceof Error) {
    return error.message;
  }

  return "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh";
};

// Auth API endpoints
const AUTH_ENDPOINTS = {
  LOGIN: "/auth/login",
  REGISTER: "/auth/register",
  LOGOUT: "/auth/logout",
  REFRESH: "/auth/refresh-token",
  PROFILE: "/auth/profile",
  UPDATE_PROFILE: "/auth/update-profile",
  CHANGE_PASSWORD: "/auth/change-password",
  SENT_OTP: "/auth/sent-otp",
  FORGOT_PASSWORD: "/auth/forgot-password",
  GOOGLE_LINK: "/auth/google-link",
  GOOGLE_CALLBACK: "/auth/google/callback",
} as const;

// Login request/response types
export interface LoginRequest {
  email: string;
  password: string;
  totpCode?: string;
  code?: string;
}

export interface LogindataResponse {
  accessToken: string;
  refreshToken: string;
  user: User;
}
export interface LoginResponse {
  data: LogindataResponse;
  statusCode: number;
  message?: string;
}

// Register request type
export interface RegisterRequest {
  name: string;
  email: string;
  phoneNumber?: string;
  password: string;
  confirmPassword: string;
  code: string; // Verification code
}

// Sent OTP request type
export interface SentOtpRequest {
  email: string;
  type: 'REGISTER' | 'FORGOT_PASSWORD' | 'LOGIN' | 'DISABLE_2FA';
}

// Forgot password request type
export interface ForgotPasswordRequest {
  email: string;
  code: string;
  newPassword: string;
  confirmPassword: string;
}

// Change password request type
export interface ChangePasswordRequest {
  currentPassword: string;
  newPassword: string;
  confirmPassword: string;
}

// Profile update request type
export interface UpdateProfileRequest {
  name?: string;
  phoneNumber?: string;
  email?: string;
  avatar?: string;
  specialization?: string;
  certifications?: string[];
}

export interface LogoutRequest {
  refreshToken?: string;
}

// Google auth types
export interface GoogleAuthResponse {
  accessToken: string;
  refreshToken: string;
  user: User;
  isNewUser: boolean;
}

// Auth service implementation
export const authService = {
  // Login user - ch·ªâ call API, kh√¥ng x·ª≠ l√Ω localStorage
  login: async (credentials: LoginRequest): Promise<LoginResponse> => {
    try {
      const response = await apiClient.post<LoginResponse>(
        AUTH_ENDPOINTS.LOGIN,
        credentials
      );

      if (response.data && response.data.data) {
        return response.data;
      }
      throw new Error(response.data.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");
    } catch (error) {
      console.error("üåê authService.login error:", error);
      throw new Error(handleApiError(error));
    }
  },

  // Register user with email verification - ch·ªâ call API
  register: async (userData: RegisterRequest): Promise<LoginResponse> => {
    try {
      const response = await apiClient.post<LoginResponse>(
        AUTH_ENDPOINTS.REGISTER,
        userData
      );

      if (response.data && response.data.data) {
        return response.data;
      }
      throw new Error(response.data.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i");
    } catch (error) {
      throw new Error(handleApiError(error));
    }
  },

  // Send OTP for email verification
  sentOtp: async (otpData: SentOtpRequest): Promise<void> => {
    try {
      await apiClient.post(AUTH_ENDPOINTS.SENT_OTP, otpData);
    } catch (error) {
      throw new Error(handleApiError(error));
    }
  },

  // Forgot password
  forgotPassword: async (passwordData: ForgotPasswordRequest): Promise<void> => {
    try {
      await apiClient.post(AUTH_ENDPOINTS.FORGOT_PASSWORD, passwordData);
    } catch (error) {
      throw new Error(handleApiError(error));
    }
  },

  // Google authentication - ch·ªâ l·∫•y URL
  getGoogleAuthUrl: async (): Promise<string> => {
    try {
      const response = await apiClient.get<{ data: string; statusCode: number; message: string }>(AUTH_ENDPOINTS.GOOGLE_LINK);
      console.log("üåê Google auth response:", response.data);
      
      if (!response.data || !response.data.data) {
        throw new Error("Backend kh√¥ng tr·∫£ v·ªÅ URL Google OAuth h·ª£p l·ªá");
      }
      
      return response.data.data;
    } catch (error) {
      console.error("üåê Google auth URL error:", error);
      throw new Error(handleApiError(error));
    }
  },

  // Google callback - ch·ªâ call API
  googleCallback: async (code: string, state: string): Promise<GoogleAuthResponse> => {
    try {
      const response = await apiClient.get<{
        data: GoogleAuthResponse;
        statusCode: number;
        message: string;
      }>(`${AUTH_ENDPOINTS.GOOGLE_CALLBACK}?code=${code}&state=${state}`);

      console.log("üåê Google callback response:", response.data);

      if (response.data && response.data.data) {
        return response.data.data;
      }
      throw new Error("Google authentication failed");
    } catch (error) {
      console.error("üåê Google callback error:", error);
      throw new Error(handleApiError(error));
    }
  },

  // Refresh token - ch·ªâ call API
  refreshToken: async (refreshToken: string): Promise<{
    accessToken: string;
    expiresIn: number;
  }> => {
    try {
      const response = await apiClient.post<{
        accessToken: string;
        expiresIn: number;
      }>(AUTH_ENDPOINTS.REFRESH, { refreshToken });

      if (response.data) {
        return response.data;
      }

      throw new Error("Refresh token th·∫•t b·∫°i");
    } catch (error) {
      throw new Error(handleApiError(error));
    }
  },

  // Get current user profile
  getProfile: async (): Promise<UserProfileRes> => {
    try {
      const response = await apiClient.get<UserProfileRes>(
        AUTH_ENDPOINTS.PROFILE
      );

      if (response.data) {
        return response.data;
      }

      throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
    } catch (error) {
      throw new Error(handleApiError(error));
    }
  },

  getUserProfile: async (): Promise<UserProfileRes> => {
    try {
      const response = await apiClient.get<UserProfileRes>(
        AUTH_ENDPOINTS.PROFILE
      );

      if (response.data) {
        return response.data;
      }

      throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
    } catch (error) {
      throw new Error(handleApiError(error));
    }
  },

  // Update user profile
  updateProfile: async (
    profileData: UpdateProfileRequest
  ): Promise<UserProfileRes> => {
    try {
      const response = await apiClient.patch<UserProfileRes>(
        AUTH_ENDPOINTS.UPDATE_PROFILE,
        profileData
      );

      if (response.data) {
        return response.data;
      }

      throw new Error("C·∫≠p nh·∫≠t h·ªì s∆° th·∫•t b·∫°i");
    } catch (error) {
      throw new Error(handleApiError(error));
    }
  },

  // Change password
  changePassword: async (
    passwordData: ChangePasswordRequest
  ): Promise<void> => {
    try {
      const response = await apiClient.post(
        AUTH_ENDPOINTS.CHANGE_PASSWORD,
        passwordData
      );

      if (!response.data) {
        throw new Error("ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");
      }
    } catch (error) {
      throw new Error(handleApiError(error));
    }
  },

  // Logout user - ch·ªâ call API
  logout: async (refreshToken: string): Promise<void> => {
    try {
      if (refreshToken) {
        await apiClient.post(AUTH_ENDPOINTS.LOGOUT, {
          refreshToken,
        });
      }
    } catch (error) {
      console.error("üåê authService.logout error:", error);
      // Don't throw error on logout, just log it
    }
  },
};

export default authService;
